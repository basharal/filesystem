// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb_filesystem

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileSeverClient is the client API for FileSever service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileSeverClient interface {
	// Returns the list of files/dirs at path.
	ListDir(ctx context.Context, in *Path, opts ...grpc.CallOption) (*ListResponse, error)
	// Creates a directory at path.
	MakeDir(ctx context.Context, in *Path, opts ...grpc.CallOption) (*StatusResponse, error)
	// Removes a file/dir at path.
	Remove(ctx context.Context, in *Path, opts ...grpc.CallOption) (*StatusResponse, error)
	// Create a file at path.
	CreateFile(ctx context.Context, in *Path, opts ...grpc.CallOption) (*StatusResponse, error)
	// Returns file content as a stream of bytes.
	ReadFile(ctx context.Context, in *Path, opts ...grpc.CallOption) (FileSever_ReadFileClient, error)
	// A client-to-server streaming RPC.
	//
	WriteFile(ctx context.Context, opts ...grpc.CallOption) (FileSever_WriteFileClient, error)
}

type fileSeverClient struct {
	cc grpc.ClientConnInterface
}

func NewFileSeverClient(cc grpc.ClientConnInterface) FileSeverClient {
	return &fileSeverClient{cc}
}

func (c *fileSeverClient) ListDir(ctx context.Context, in *Path, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/filesystem.FileSever/ListDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSeverClient) MakeDir(ctx context.Context, in *Path, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/filesystem.FileSever/MakeDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSeverClient) Remove(ctx context.Context, in *Path, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/filesystem.FileSever/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSeverClient) CreateFile(ctx context.Context, in *Path, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/filesystem.FileSever/CreateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSeverClient) ReadFile(ctx context.Context, in *Path, opts ...grpc.CallOption) (FileSever_ReadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileSever_ServiceDesc.Streams[0], "/filesystem.FileSever/ReadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileSeverReadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileSever_ReadFileClient interface {
	Recv() (*Payload, error)
	grpc.ClientStream
}

type fileSeverReadFileClient struct {
	grpc.ClientStream
}

func (x *fileSeverReadFileClient) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileSeverClient) WriteFile(ctx context.Context, opts ...grpc.CallOption) (FileSever_WriteFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileSever_ServiceDesc.Streams[1], "/filesystem.FileSever/WriteFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileSeverWriteFileClient{stream}
	return x, nil
}

type FileSever_WriteFileClient interface {
	Send(*FilePayload) error
	CloseAndRecv() (*StatusResponse, error)
	grpc.ClientStream
}

type fileSeverWriteFileClient struct {
	grpc.ClientStream
}

func (x *fileSeverWriteFileClient) Send(m *FilePayload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileSeverWriteFileClient) CloseAndRecv() (*StatusResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileSeverServer is the server API for FileSever service.
// All implementations must embed UnimplementedFileSeverServer
// for forward compatibility
type FileSeverServer interface {
	// Returns the list of files/dirs at path.
	ListDir(context.Context, *Path) (*ListResponse, error)
	// Creates a directory at path.
	MakeDir(context.Context, *Path) (*StatusResponse, error)
	// Removes a file/dir at path.
	Remove(context.Context, *Path) (*StatusResponse, error)
	// Create a file at path.
	CreateFile(context.Context, *Path) (*StatusResponse, error)
	// Returns file content as a stream of bytes.
	ReadFile(*Path, FileSever_ReadFileServer) error
	// A client-to-server streaming RPC.
	//
	WriteFile(FileSever_WriteFileServer) error
	mustEmbedUnimplementedFileSeverServer()
}

// UnimplementedFileSeverServer must be embedded to have forward compatible implementations.
type UnimplementedFileSeverServer struct {
}

func (UnimplementedFileSeverServer) ListDir(context.Context, *Path) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDir not implemented")
}
func (UnimplementedFileSeverServer) MakeDir(context.Context, *Path) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeDir not implemented")
}
func (UnimplementedFileSeverServer) Remove(context.Context, *Path) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedFileSeverServer) CreateFile(context.Context, *Path) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedFileSeverServer) ReadFile(*Path, FileSever_ReadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadFile not implemented")
}
func (UnimplementedFileSeverServer) WriteFile(FileSever_WriteFileServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteFile not implemented")
}
func (UnimplementedFileSeverServer) mustEmbedUnimplementedFileSeverServer() {}

// UnsafeFileSeverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileSeverServer will
// result in compilation errors.
type UnsafeFileSeverServer interface {
	mustEmbedUnimplementedFileSeverServer()
}

func RegisterFileSeverServer(s grpc.ServiceRegistrar, srv FileSeverServer) {
	s.RegisterService(&FileSever_ServiceDesc, srv)
}

func _FileSever_ListDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSeverServer).ListDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.FileSever/ListDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSeverServer).ListDir(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSever_MakeDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSeverServer).MakeDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.FileSever/MakeDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSeverServer).MakeDir(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSever_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSeverServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.FileSever/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSeverServer).Remove(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSever_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSeverServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.FileSever/CreateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSeverServer).CreateFile(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSever_ReadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Path)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileSeverServer).ReadFile(m, &fileSeverReadFileServer{stream})
}

type FileSever_ReadFileServer interface {
	Send(*Payload) error
	grpc.ServerStream
}

type fileSeverReadFileServer struct {
	grpc.ServerStream
}

func (x *fileSeverReadFileServer) Send(m *Payload) error {
	return x.ServerStream.SendMsg(m)
}

func _FileSever_WriteFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileSeverServer).WriteFile(&fileSeverWriteFileServer{stream})
}

type FileSever_WriteFileServer interface {
	SendAndClose(*StatusResponse) error
	Recv() (*FilePayload, error)
	grpc.ServerStream
}

type fileSeverWriteFileServer struct {
	grpc.ServerStream
}

func (x *fileSeverWriteFileServer) SendAndClose(m *StatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileSeverWriteFileServer) Recv() (*FilePayload, error) {
	m := new(FilePayload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileSever_ServiceDesc is the grpc.ServiceDesc for FileSever service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileSever_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filesystem.FileSever",
	HandlerType: (*FileSeverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDir",
			Handler:    _FileSever_ListDir_Handler,
		},
		{
			MethodName: "MakeDir",
			Handler:    _FileSever_MakeDir_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _FileSever_Remove_Handler,
		},
		{
			MethodName: "CreateFile",
			Handler:    _FileSever_CreateFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadFile",
			Handler:       _FileSever_ReadFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WriteFile",
			Handler:       _FileSever_WriteFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "filesystem.proto",
}
